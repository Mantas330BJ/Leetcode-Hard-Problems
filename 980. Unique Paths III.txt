https://leetcode.com/problems/unique-paths-iii/

class Solution {
public:
    int ans = 0;
    int dirsx[4] = {0, 0, 1, -1};
    int dirsy[4] = {1, -1, 0, 0};
    
    void bt(vector<vector<int>>& grid, int i, int j, int attempts, int neededAttempts) {
        if (i < 0 || j < 0 || i > grid.size() - 1 || j > grid[0].size() - 1 || grid[i][j] == -1)
            return;
        if (attempts == neededAttempts || grid[i][j] == 2) {
            if (attempts == neededAttempts && grid[i][j] == 2)
                ++ans;
            return;
        }
        grid[i][j] = -1;
        for (int dir = 0; dir < 4; ++dir) {
            bt(grid, i + dirsx[dir], j + dirsy[dir], attempts + 1, neededAttempts);
        }
        grid[i][j] = 0;
    }
    
    int uniquePathsIII(vector<vector<int>>& grid) {
        int startI, startJ, neededAttempts = 0;
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[0].size(); ++j) {
                if (grid[i][j] != -1) {
                    ++neededAttempts;
                    if (grid[i][j] == 1) {
                        startI = i;
                        startJ = j;
                    }
                }
                
            }
        }
        bt(grid, startI, startJ, 1, neededAttempts);
        return ans;
    }
};