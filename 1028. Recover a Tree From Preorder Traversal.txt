https://leetcode.com/problems/recover-a-tree-from-preorder-traversal/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int i = 0;
    TreeNode* dfs(string& s, int level) {
        int ti = i;
        for (int j = 0; j < level; ++j, ++ti) {
            if (ti >= s.size() || s[ti] != '-')
                return NULL;
        }
        i = ti;
        int nb = 0;
        while (i < s.size() && s[i] != '-')
            nb = 10 * nb + s[i++] - '0';
        return new TreeNode(nb, dfs(s, level + 1), dfs(s, level + 1));
    }
    
    TreeNode* recoverFromPreorder(string s) {
        return dfs(s, 0);
    }
};