https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> nodes;
    void traverse(TreeNode* root, int left, int right) {
        if (root) {
            nodes.push_back({right, left, root->val});
            traverse(root->left, left + 1, right - 1);
            traverse(root->right, left + 1, right + 1);
        }
    }
    
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        traverse(root, 0, 0);
        sort(nodes.begin(), nodes.end());
        vector<vector<int>> ans;
        vector<int> level;
        for (int i = 0; i < nodes.size(); ++i) {
            level.push_back(nodes[i][2]);
            if (i + 1 == nodes.size() || nodes[i][0] != nodes[i + 1][0]) {
                ans.push_back(level);
                level = {};
            }
        }
        return ans;
    }
};