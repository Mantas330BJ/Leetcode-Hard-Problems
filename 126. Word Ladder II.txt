https://leetcode.com/problems/word-ladder-ii/

class Solution {
public:
    void bt(unordered_map<string, unordered_set<string>>& parent, vector<vector<string>>& ladders, vector<string>& order, string& t) {
        if (!parent[t].empty()) {
            order.push_back(t);
            for (string p : parent[t]) {
                bt(parent, ladders, order, p);
            }
            order.pop_back();
        } else {
            ladders.push_back(vector<string>(order.rbegin(), order.rend()));
        }
    }
    
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> wordSet(wordList.begin(), wordList.end());
        if (wordSet.count(beginWord))
            wordSet.erase(beginWord);
        queue<string> q;
        unordered_map<string, unordered_set<string>> parent;
        parent[beginWord] = {"\0"};
        q.push(beginWord);
        stack<string> toErase;
        
        vector<vector<string>> ladders;
        while (!q.empty()) {
            for (int n = q.size(); n > 0; --n) {
                string t = q.front();
                if (t == endWord) {
                    vector<string> order;
                    bt(parent, ladders, order, t);
                    return ladders;
                }
                q.pop();
                for (int i = 0; i < t.size(); ++i) {
                    char c = t[i];
                    for (int j = 'a'; j <= 'z'; ++j) {
                        if (c == j)
                            continue;
                        string s = t;
                        s[i] = j;
                        if (wordSet.count(s)) {
                            if (parent[s].empty()) {
                                q.push(s);
                                toErase.push(s);
                            }
                            parent[s].insert(t);
                        }
                    }
                }
            }
            while (!toErase.empty()) {
                wordSet.erase(toErase.top());
                toErase.pop();
            }
        }
        return {};
    }
};