https://leetcode.com/problems/minimum-moves-to-reach-target-with-rotations/

class Solution {
public:
    int minimumMoves(vector<vector<int>>& grid) {
        int n = grid.size();
        unordered_map<int, unordered_set<int>> visited;
        visited[0].insert(1);
        queue<pair<int, int>> q;
        q.push({0, 1});
        int ans = 0;
        while (!q.empty()) {
            for (int _ = q.size(); _ > 0; --_) {
                auto t = q.front();
                q.pop();
                int x1 = t.first / n, y1 = t.first % n;
                int x2 = t.second / n, y2 = t.second % n;
                if (x1 == n - 1 && y1 == n - 2 && x2 == n - 1 && y2 == n - 1) {
                    return ans;
                }
                vector<vector<int>> moves;
                if (x1 + 1 < n && x2 + 1 < n && !grid[x1 + 1][y1] && !grid[x2 + 1][y2])
                    moves.push_back({x1 + 1, y1, x2 + 1, y2});
                if (y1 + 1 < n && y2 + 1 < n && !grid[x1][y1 + 1] && !grid[x2][y2 + 1])
                    moves.push_back({x1, y1 + 1, x2, y2 + 1});
                if (x2 + 1 < n && x1 == x2 && y1 + 1 == y2 && !grid[x1 + 1][y1] && !grid[x2 + 1][y2])
                    moves.push_back({x1, y1, x2 + 1, y2 - 1});
                if (y2 + 1 < n && y1 == y2 && x1 + 1 == x2 && !grid[x1][y1 + 1] && !grid[x2][y2 + 1])
                    moves.push_back({x1, y1, x2 - 1, y2 + 1});
                
                for (auto& m : moves) {
                    int h1 = m[0] * n + m[1], h2 = m[2] * n + m[3];
                    if (!visited[h1].count(h2)) {
                        visited[h1].insert(h2);
                        q.push({h1, h2});
                    }
                }
            }
            ++ans;
        }
        return -1;
    }
};