https://leetcode.com/problems/maximum-profit-in-job-scheduling/

class Solution {
public:
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        vector<vector<int>> jobs(startTime.size());
        for (int i = 0; i < startTime.size(); ++i) {
            jobs[i] = {endTime[i], startTime[i], profit[i]};
        }
        
        sort(jobs.begin(), jobs.end());
        map<int, int> dp;
        dp[0] = 0;
        for (auto& job : jobs) {
            int start = job[0], end = job[1], prof = job[2];
            auto it = prev(dp.upper_bound(end));
            int cur = it->second + prof;
            if (cur > dp.rbegin()->second) {
                dp[start] = cur;
            }
        }
        return dp.rbegin()->second;
    }
};