https://leetcode.com/problems/swim-in-rising-water/

class Solution {
public:
    int dirsx[4] = {1, 0, 0, -1};
    int dirsy[4] = {0, 1, -1, 0};
    
    bool canReach(vector<vector<int>>& grid, int t) {
        int visited[50][50] = {};
        queue<pair<int, int>> q;
        if (grid[0][0] <= t) {
            q.push({0, 0});
            visited[0][0] = true;
        }
        while (!q.empty()) {
            for (int n = q.size(); n > 0; --n) {
                pair<int, int> curr = q.front();
                if (curr.first == grid.size() - 1 && curr.second == grid[0].size() - 1)
                    return true;
                q.pop();
                for (int d = 0; d < 4; ++d) {
                    int x = dirsx[d] + curr.first, y = dirsy[d] + curr.second;
                    if (x >= 0 && y >= 0 && x < grid.size() && y < grid[0].size() && grid[x][y] <= t && !visited[x][y]) {
                        visited[x][y] = true;
                        q.push({x, y});
                    }       
                }
                
            }
        }
        return false;
    }
    
    
    
    
    int swimInWater(vector<vector<int>>& grid) {
        int lo = 0, hi = grid.size() * grid[0].size() - 1, mid;
        while (lo <= hi) {
            mid = lo + (hi - lo) / 2;
            if (canReach(grid, mid))
                hi = mid - 1;
            else
                lo = mid + 1;
        }
        return lo;
    }
};