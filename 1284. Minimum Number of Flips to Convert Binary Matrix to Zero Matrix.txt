https://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/submissions/

class Solution {
public:
    int ans = -1;
    bool allZeroes(vector<vector<int>>& mat) {
        for (int i = 0; i < mat.size(); ++i) {
            for (int j = 0; j < mat[i].size(); ++j) {
                if (mat[i][j])
                    return false;
            }
        }
        return true;
    }
    
    void flip(vector<vector<int>>& mat, int i, int j) {
        if (i >= 0 && j >= 0 && i < mat.size() && j < mat[0].size())
            mat[i][j] ^= 1;
            
    }
    
    void tryFlips(vector<vector<int>>& mat, int i, int j, int moveCount) {
        if (allZeroes(mat)) {
            if (ans == -1)
                ans = moveCount;
            else
                ans = min(ans, moveCount);
        }
        if (i == mat.size())
            i = 0, ++j;
        if (j < mat[0].size()) {
            for (int t = 1; t >= 0; --t) {
                flip(mat, i, j);
                flip(mat, i + 1, j);
                flip(mat, i, j + 1);
                flip(mat, i - 1, j);
                flip(mat, i, j - 1);
                tryFlips(mat, i + 1, j, moveCount + t);
            }
        }
    }
    
    int minFlips(vector<vector<int>>& mat) {
        tryFlips(mat, 0, 0, 0);
        return ans;
    }
};