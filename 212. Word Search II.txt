https://leetcode.com/problems/word-search-ii/

class TrieNode {
    public:
    char data;
    TrieNode* children[26];
    bool isEnd;
    TrieNode(char data) {
        memset(children, 0, 26 * sizeof(TrieNode*));
        this->data = data;
        isEnd = false;
    }
};


class Trie {
public:
    TrieNode* root;
    
    Trie() {
        root = new TrieNode('\0');
    }
    
    void add(string& word) {
        TrieNode* node = root;
        for (int i = 0; i < word.size(); ++i) {
            if (!node->children[word[i] - 'a'])
                node->children[word[i] - 'a'] = new TrieNode(word[i]);
            node = node->children[word[i] - 'a'];
        }
        node->isEnd = true;
    }
    
    void search(unordered_set<string>& uniques, vector<string>& foundWords, vector<vector<char>>& board, bool visited[12][12], string& word, TrieNode* root, int i, int j) {
        if (i >= 0 && j >= 0 && i < board.size() && j < board[0].size() && !visited[i][j]) {
            if (root->children[board[i][j] - 'a']) {
                visited[i][j] = true;
                word.push_back(board[i][j]);
                TrieNode* next = root->children[board[i][j] - 'a'];
                if (next->isEnd && !uniques.count(word)) {
                    uniques.insert(word);
                    foundWords.push_back(word);
                }
                search(uniques, foundWords, board, visited, word, next, i + 1, j);
                search(uniques, foundWords, board, visited, word, next, i, j + 1);
                search(uniques, foundWords, board, visited, word, next, i - 1, j);
                search(uniques, foundWords, board, visited, word, next, i, j - 1);
                word.pop_back();
                visited[i][j] = false;
            }
        }
    }
};



class Solution {
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> foundWords;
        unordered_set<string> uniques;
        Trie* trie = new Trie();
        for (string& s : words)
            trie->add(s);
        for (int i = 0; i < board.size(); ++i) {
            for (int j = 0; j < board[0].size(); ++j) {
                bool visited[12][12] = {};
                string word = "";
                trie->search(uniques, foundWords, board, visited, word, trie->root, i, j);
            }
        }
        return foundWords;
    }
};