https://leetcode.com/problems/count-all-possible-routes/

class Solution {
public:
    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {
        int dp[201][101] = {};
        int mod = 1e9 + 7;
        dp[0][start] = 1;
        for (int f = 1; f <= fuel; ++f) {
            for (int i = 0; i < locations.size(); ++i) {
                for (int j = 0; j < locations.size(); ++j) {
                    if (i != j) {
                        int prev = f - abs(locations[i] - locations[j]);
                        if (prev >= 0)
                            dp[f][i] = (dp[f][i] + dp[prev][j]) % mod;
                    }
                }
            }
        }
        int ans = 0;
        for (int f = 0; f <= fuel; ++f)
            ans = (ans + dp[f][finish]) % mod;
        return ans;
    }
};